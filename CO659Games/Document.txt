1. Abstraction - Modelling some real world or imagined 
sitiuations as a series of objects containing information
and methods. For examples; Tool class is based on real world
tool such as hammers and saws. However the class will only
model certain aspects of a tool such as the weight of a tool
and what the tool can be used to do.

2. Encapsulation - The tool class for example contains a weight variable
which is private which can only be accessed from within the class.
In order to access this variable, methods to set and get the varialble 
values are added. Thus the variable in encapsulated and protected 
within the class.

3. Inheritance - This is were a class is based on another class and 
inherits all the properties and methods from the parent class. 
However it can extend the parent class and have different versions 
of the methods (polymorphism) or additional new methods. It can also 
access any protected or public variable and can have other new 
additional variables. For example; The Tool class is a parent class 
for the Hammer and Saw class.

4. Polymorphic Behaviour - Whenever a child class requires a variation on
the behaviour of an existing method in a parent class, Polymorphic method
can be added. For example a method which has the same signature as the
parent method but performs a different but similar action. 
For example: Tool.Use(); Hammer.Use(); and Saw.Use();

5. Method Overloading - This is where there are different versions of the 
same method. The name of the method remains the same but the parameters
differ. For example: Hammer.Use(); and Hammer.Use(int)

6. Friendship - 

7. Static Members  - Tool has a static member called totalWeight so that anytime
an object is created the weight if that object will be added to the total weight
For example: The games uses method created in hammer of weight 30 and a saw of 
weight 20. The total weight is 50.

8. Constructors - This is called to create an instance of a class (and objects)
For example: the Game.useTool method creates an instance of a hammer using the
hammers constructor which requires a weight.The tool class as parent class of hammer
has a constructor without a paremeter that can be called from the child if required.
The too class can be made abstract as it will not be used to create any anonymous
tool as the game only requires a hammer and a saw.

9. Pointers - A pointer contains the memory address of a variable. 
For example; the game contains a location class which has an array 
of pointers other locations, this array is referd to as exits. 
Thus a location can be linked to other locations and a player can move
from one location to anither in four directions. The map is data structure
which contains a network of locations. The map keeps track of the players 
current location.

10.Functional Pointers - 
